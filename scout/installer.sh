#!/bin/bash

# Scout Installer Script for Raspberry Pi Pico 2 W
# This script configures and prepares files for deployment

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== Scout Sensor Configuration Tool ===${NC}"
echo ""

# Function to prompt for input with validation
prompt_input() {
    local prompt="$1"
    local var_name="$2"
    local allow_empty="$3"
    local value=""
    
    while true; do
        echo -ne "${YELLOW}$prompt${NC}"
        read -r value
        
        if [[ -n "$value" || "$allow_empty" == "true" ]]; then
            eval "$var_name='$value'"
            break
        else
            echo -e "${RED}This field cannot be empty. Please try again.${NC}"
        fi
    done
}

# Function to select sensor type
select_sensor() {
    local sensors_dir="src/sensor"
    local sensors=()
    
    echo -e "${BLUE}Available sensors:${NC}"
    
    # Check if sensor directory exists
    if [[ ! -d "$sensors_dir" ]]; then
        echo -e "${RED}Error: Sensor directory '$sensors_dir' not found!${NC}"
        exit 1
    fi
    
    # Get available sensors
    local i=1
    for sensor in "$sensors_dir"/*/; do
        if [[ -d "$sensor" ]]; then
            sensor_name=$(basename "$sensor")
            sensors+=("$sensor_name")
            echo -e "${GREEN}$i) $sensor_name${NC}"
            ((i++))
        fi
    done
    
    if [[ ${#sensors[@]} -eq 0 ]]; then
        echo -e "${RED}Error: No sensors found in '$sensors_dir'${NC}"
        exit 1
    fi
    
    while true; do
        echo -ne "${YELLOW}Select sensor (1-${#sensors[@]}): ${NC}"
        read -r selection
        
        if [[ "$selection" =~ ^[0-9]+$ ]] && [[ "$selection" -ge 1 ]] && [[ "$selection" -le ${#sensors[@]} ]]; then
            SENSOR="${sensors[$((selection-1))]}"
            break
        else
            echo -e "${RED}Invalid selection. Please choose a number between 1 and ${#sensors[@]}.${NC}"
        fi
    done
}

# Collect configuration information
echo -e "${BLUE}Please provide the following configuration details:${NC}"
echo ""

# WiFi Configuration
prompt_input "WiFi SSID: " WIFI_SSID false
prompt_input "WiFi Password: " WIFI_PASSWORD false

# Location
prompt_input "Location (e.g., office, greenhouse, lab): " LOCATION false

# Sensor Selection
select_sensor

# Webhook Configuration
prompt_input "Webhook URL: " WEBHOOK_URL false
prompt_input "Webhook Auth Token (optional): " WEBHOOK_AUTH true

echo ""
echo -e "${GREEN}Configuration Summary:${NC}"
echo "WiFi SSID: $WIFI_SSID"
echo "WiFi Password: [HIDDEN]"
echo "Location: $LOCATION"
echo "Sensor: $SENSOR"
echo "Webhook URL: $WEBHOOK_URL"
echo "Webhook Auth: ${WEBHOOK_AUTH:-'(not set)'}"

# Confirm configuration
echo ""
while true; do
    echo -ne "${YELLOW}Is this configuration correct? (y/n): ${NC}"
    read -r confirm
    case $confirm in
        [Yy]* ) break;;
        [Nn]* ) echo -e "${RED}Configuration cancelled.${NC}"; exit 1;;
        * ) echo -e "${RED}Please answer yes or no.${NC}";;
    esac
done

# Generate hostname
HOSTNAME="scout-${LOCATION,,}-${SENSOR,,}"  # Convert to lowercase
echo ""
echo -e "${BLUE}Generated hostname: ${GREEN}$HOSTNAME${NC}"

# Create output directory structure
OUTPUT_DIR="out/$HOSTNAME"
echo -e "${BLUE}Creating output directory: ${GREEN}$OUTPUT_DIR${NC}"

if [[ -d "$OUTPUT_DIR" ]]; then
    echo -e "${YELLOW}Output directory already exists. Contents will be overwritten.${NC}"
    rm -rf "$OUTPUT_DIR"
fi

mkdir -p "$OUTPUT_DIR"

# Generate config.py file
echo -e "${BLUE}Generating config.py...${NC}"
cat > "$OUTPUT_DIR/config.py" << EOF
# config.py - Configuration file
# Generated by Scout Installer

# WiFi Settings
WIFI_SSID = "$WIFI_SSID"
WIFI_PASSWORD = "$WIFI_PASSWORD"
WIFI_TIMEOUT = 10
LOCATION = '$LOCATION'
SENSOR = '$SENSOR'
WEBHOOK_URL = '$WEBHOOK_URL'
WEBHOOK_AUTH = '$WEBHOOK_AUTH'

# Application Settings
LOOP_DELAY = 30  # seconds

# Pin Definitions
DS18X20_DAT_PIN = 28
EOF

# Copy core files
echo -e "${BLUE}Copying core files...${NC}"

# Check and copy boot.py
if [[ -f "src/boot.py" ]]; then
    cp "src/boot.py" "$OUTPUT_DIR/"
    echo -e "${GREEN}âœ“ Copied boot.py${NC}"
else
    echo -e "${RED}âœ— Warning: boot.py not found${NC}"
fi

# Check and copy main.py
if [[ -f "src/main.py" ]]; then
    cp "src/main.py" "$OUTPUT_DIR/"
    echo -e "${GREEN}âœ“ Copied main.py${NC}"
else
    echo -e "${RED}âœ— Warning: main.py not found${NC}"
fi

# Check and copy wifi_manager.py
if [[ -f "src/wifi_manager.py" ]]; then
    cp "src/wifi_manager.py" "$OUTPUT_DIR/"
    echo -e "${GREEN}âœ“ Copied wifi_manager.py${NC}"
else
    echo -e "${RED}âœ— Warning: wifi_manager.py not found${NC}"
fi

# Copy sensor handler
SENSOR_HANDLER_PATH="src/sensor/$SENSOR/sensor_handler.py"
if [[ -f "$SENSOR_HANDLER_PATH" ]]; then
    cp "$SENSOR_HANDLER_PATH" "$OUTPUT_DIR/"
    echo -e "${GREEN}âœ“ Copied sensor_handler.py from $SENSOR sensor${NC}"
else
    echo -e "${RED}âœ— Error: sensor_handler.py not found for $SENSOR sensor at $SENSOR_HANDLER_PATH${NC}"
    exit 1
fi

# Display completion message
echo ""
echo -e "${GREEN}=== Installation Complete! ===${NC}"
echo -e "${BLUE}Device hostname: ${GREEN}$HOSTNAME${NC}"
echo -e "${BLUE}Output directory: ${GREEN}$OUTPUT_DIR${NC}"
echo ""
echo -e "${BLUE}Files ready for deployment:${NC}"
ls -la "$OUTPUT_DIR/"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "1. Copy all files from '$OUTPUT_DIR' to your Raspberry Pi Pico 2 W"
echo "2. Reset the device to start the sensor application"
echo ""
echo -e "${GREEN}Happy sensing! ðŸš€${NC}"